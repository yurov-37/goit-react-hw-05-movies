{"version":3,"file":"static/js/631.977271ee.chunk.js","mappings":"2QAGaA,EAAaC,EAAAA,EAAAA,KAAH,qHAOVC,EAAcD,EAAAA,EAAAA,MAAH,6RAgBXE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,IAAPH,CAAH,+G,6BCtBR,SAASI,EAAT,GAAqC,IAAhBC,EAAe,EAAfA,YAClC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAkBA,OACE,UAACT,EAAD,CAAYU,SAbK,SAAAC,GACjBA,EAAMC,iBACqB,KAAvBJ,EAAYK,QAMhBP,EAAYE,GACZC,EAAe,KANbK,EAAAA,GAAAA,MAAY,yBAA0B,CACpCC,KAAM,gBAMX,EAGC,WACE,SAACZ,EAAD,KACA,SAACD,EAAD,CACEc,aAAa,MACbC,WAAS,EACTC,YAAY,mBACZC,KAAK,OACLC,MAAOZ,EACPa,SAzBqB,SAAAV,GACzBF,EAAeE,EAAMW,cAAcF,MAAMG,cAC1C,MA2BF,C,kCC/BYC,EAAe,mCAAG,WAAMJ,GAAN,uFACNK,EAAAA,EAAAA,IAAA,UAJR,gCAIQ,gCAHT,mCAGS,iCAC8CL,EAD9C,gCADM,cACvBM,EADuB,yBAKtBA,EAASC,KAAKC,SALQ,2CAAH,sD,oBCIb,SAASC,IAAU,IAAD,EAC/B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCzB,EAAAA,EAAAA,WAAS,GAA3C,eAAO0B,EAAP,KAAkBC,EAAlB,KACA,GAA0B3B,EAAAA,EAAAA,UAAS,MAAnC,eAAO4B,EAAP,KAAcC,EAAd,KACA,GAAsC7B,EAAAA,EAAAA,UAAS,IAA/C,eAAO8B,EAAP,KAAoBC,EAApB,KACM9B,EAAW,UAAGuB,EAAaQ,IAAI,gBAApB,QAAgC,GAC3CC,GAAWC,EAAAA,EAAAA,MA8CjB,OAxCAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,sGAEUC,EAA0B,GAFpC,SAG2BnB,EAAgBhB,GAH3C,UAI4B,KADlBkB,EAHV,QAIiBkB,OAJjB,wBAKM9B,EAAAA,GAAAA,MAAY,6BAA8B,CACxCC,KAAM,iBAERiB,GAAgB,SAAAa,GAAgB,MAAwB,CAAC,CAAzB,IAChCP,GAAe,SAAAQ,GAAe,MAAuB,EAAvB,IATpC,2BAYIpB,EAASqB,KACP,YAA8D,IAA3DC,EAA0D,EAA1DA,GAAIC,EAAsD,EAAtDA,eAAgBC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,aAC5BC,EAAQ,CACZJ,GAAAA,EACAK,KAHyD,EAAXA,KAI9CC,MAAOL,EACPM,OAAQL,EACRM,YAAaL,GAEf,OAAOR,EAAwBc,KAAKL,EACrC,IAGHd,EAAeK,GAzBnB,kDA2BIP,EAAS,EAAD,IA3BZ,yBA6BIF,GAAa,GA7BjB,8EALc,sBACM,KAAhB1B,IAGJ0B,GAAa,GAJC,mCAqCdwB,GACD,GAAE,CAAClD,EAAawB,KAGf,UAAC,IAAD,YACE,SAAC3B,EAAD,CAAWC,YA9CS,SAAAc,GACtBY,EAA0B,KAAVZ,EAAe,CAAEuC,MAAOvC,GAAU,CAAC,EACpD,IA6CIa,IAAa,SAAC,KAAD,CAAW2B,MAAM,YAC9BzB,IAAS,2EACTE,EAAYO,OAAS,IACpB,SAACiB,EAAA,EAAD,CAAYC,OAAQzB,EAAa0B,MAAO,CAAEC,KAAMxB,OAIvD,C","sources":["components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","api/getSearchMovies.js","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const SearchForm = styled.form`\n  margin-top: 10px;\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n`;\n\nexport const SearchInput = styled.input`\n  padding: 12px 32px 12px 12px;\n  width: 300px;\n  font-size: 22px;\n  border: none;\n  border-bottom: 2px solid grey;\n  background: #f6f6f6;\n  background-color: transparent;\n  &:active,\n  :hover,\n  :focus {\n    outline: 0;\n    outline-offset: 0;\n  }\n`;\n\nexport const SearchIcon = styled(HiSearch)`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 6px;\n  color: grey;\n`;\n","import { SearchForm, SearchInput, SearchIcon } from './SearchBox.styled';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\n\nexport default function SearchBox({ onUrlChange }) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearchChange = event => {\n    setSearchQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const formSubmit = event => {\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      toast.error('Request field is empty', {\n        icon: '‚ò£Ô∏è',\n      });\n      return;\n    }\n    onUrlChange(searchQuery);\n    setSearchQuery('');\n  };\n\n  return (\n    <SearchForm onSubmit={formSubmit}>\n      <SearchIcon />\n      <SearchInput\n        autocomplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies...\"\n        type=\"text\"\n        value={searchQuery}\n        onChange={handleSearchChange}\n      />\n    </SearchForm>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'cd5b2d3acc514f77d882945a59cba433';\n\nexport const getSearchMovies = async value => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${value}&page=1&include_adult=false`\n  );\n\n  return response.data.results;\n};\n","import { Container } from 'components/Container/Container.styled';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport { toast } from 'react-toastify';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getSearchMovies } from 'api/getSearchMovies';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [foundMovies, setFoundMovies] = useState([]);\n  const searchQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const changeUrlParams = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    setIsLoading(true);\n    async function getSearchMoviesData() {\n      try {\n        const searchMoviesDataForList = [];\n        const response = await getSearchMovies(searchQuery);\n        if (response.length === 0) {\n          toast.error('No movies for your request', {\n            icon: 'üëª',\n          });\n          setSearchParams(prevSearchParams => (prevSearchParams = {}));\n          setFoundMovies(prevFoundMovies => (prevFoundMovies = []));\n          return;\n        }\n        response.map(\n          ({ id, original_title, poster_path, vote_average, name }) => {\n            const movie = {\n              id,\n              name,\n              title: original_title,\n              poster: poster_path,\n              voteAverage: vote_average,\n            };\n            return searchMoviesDataForList.push(movie);\n          }\n        );\n\n        setFoundMovies(searchMoviesDataForList);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getSearchMoviesData();\n  }, [searchQuery, setSearchParams]);\n\n  return (\n    <Container>\n      <SearchBox onUrlChange={changeUrlParams} />\n      {isLoading && <ThreeDots color=\"#3f51b5\" />}\n      {error && <h2>Data processing error. Try reloading the page.</h2>}\n      {foundMovies.length > 0 && (\n        <MoviesList movies={foundMovies} state={{ from: location }} />\n      )}\n    </Container>\n  );\n}\n"],"names":["SearchForm","styled","SearchInput","SearchIcon","HiSearch","SearchBox","onUrlChange","useState","searchQuery","setSearchQuery","onSubmit","event","preventDefault","trim","toast","icon","autocomplete","autoFocus","placeholder","type","value","onChange","currentTarget","toLowerCase","getSearchMovies","axios","response","data","results","Movies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","foundMovies","setFoundMovies","get","location","useLocation","useEffect","searchMoviesDataForList","length","prevSearchParams","prevFoundMovies","map","id","original_title","poster_path","vote_average","movie","name","title","poster","voteAverage","push","getSearchMoviesData","query","color","MoviesList","movies","state","from"],"sourceRoot":""}